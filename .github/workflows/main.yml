name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release
jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Windows Dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v3.0.0
        with:
          version: 8.15.7

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: pnpm install

      - name: Download playerctl binary
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          wget https://github.com/altdesktop/playerctl/releases/download/v2.4.1/playerctl-2.4.1_amd64.deb
          dpkg -x playerctl-2.4.1_amd64.deb playerctl
          mkdir -p src-tauri/binaries
          cp playerctl/usr/bin/playerctl "src-tauri/binaries/playerctl"

      # Add Visual C++ build tools to the path first
      - name: Setup MSVC
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Create dummy playerctl for Windows
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # Create a directory for the binary
          New-Item -ItemType Directory -Force -Path src-tauri/binaries
          
          # Create a simple C source file for a dummy executable
          @'
          #include <stdio.h>
          int main() {
              return 0;
          }
          '@ | Out-File -Encoding ASCII src-tauri/binaries/dummy.c
          
          # Compile the C file into a 64-bit Windows executable
          cl.exe /nologo /O1 /MD /Fe:"src-tauri/binaries/playerctl-${{ matrix.target }}.exe" src-tauri/binaries/dummy.c
          
          # Clean up the temporary files
          Remove-Item src-tauri/binaries/dummy.c
          Remove-Item src-tauri/binaries/dummy.obj -ErrorAction SilentlyContinue

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: --target ${{ matrix.target }}
