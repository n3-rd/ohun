name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-linux:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            packageType: 'deb'
          - platform: 'ubuntu-22.04'
            packageType: 'rpm'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            cargo-generate-rpm \
            cargo-deb

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn' # Set this to npm, yarn, or pnpm.

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use.

      - name: Build release binary
        run: cargo build --release

      - name: Strip debug symbols
        run: strip -s target/release/YOUR_BINARY_NAME

      - name: Generate DEB package
        if: matrix.packageType == 'deb'
        run: cargo deb

      - name: Generate RPM package
        if: matrix.packageType == 'rpm'
        run: cargo generate-rpm

      - name: Upload DEB package
        if: matrix.packageType == 'deb'
        uses: actions/upload-artifact@v3
        with:
          name: deb-package
          path: target/debian/*.deb

      - name: Upload RPM package
        if: matrix.packageType == 'rpm'
        uses: actions/upload-artifact@v3
        with:
          name: rpm-package
          path: target/generate-rpm/*.rpm

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # The action automatically replaces __VERSION__ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ''
